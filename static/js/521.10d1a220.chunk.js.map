{"version":3,"file":"static/js/521.10d1a220.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.ts","components/ContactList/ContactList.styled.ts","components/ContactList/ContactListItem.tsx","components/ContactList/ContactList.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContactFormTitle = styled.h1`\n  color: black;\n  text-transform: capitalize;\n`;\n\nexport const ContactForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin-right: auto;\n  margin-left: auto;\n  border: 2px solid gray;\n  border-radius: 4px;\n  padding: 20px;\n  width: fit-content;\n`;\n\nexport const ContactFormList = styled.ul`\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-top: 0;\n  list-style: none;\n`;\n\nexport const ContactFormItem = styled.li`\n  margin-bottom: 15px;\n`;\n\nexport const ContactFormLabel = styled.label`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  text-transform: capitalize;\n  font-size: 18px;\n`;\n\nexport const ContactFormInput = styled.input`\n  min-width: 300px;\n  min-height: 30px;\n  margin-top: 5px;\n  border: 2px solid gray;\n  border-radius: 4px;\n  padding-left: 5px;\n\n  &::placeholder {\n    font-size: 16px;\n    color: lightgray;\n  }\n`;\n\nexport const AddContactButton = styled.button`\n  margin-left: auto;\n  margin-right: auto;\n  padding: 8px 16px;\n  min-width: 120px;\n  min-height: 30px;\n  border-radius: 4px;\n  background: transparent;\n  border: 2px solid gray;\n  color: gray;\n  text-transform: capitalize;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n\n  &:hover,\n  :focus-visible {\n    background-color: gray;\n    color: white;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const ContactList = styled.ul`\n  margin-right: auto;\n  margin-left: auto;\n  padding-left: 0;\n  width: 360px;\n  list-style: none;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  height: 110px;\n  border: 2px solid gray;\n  border-radius: 4px;\n  padding: 15px;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:not(:last-child) {\n    margin-bottom: 15px;\n  }\n\n  &:hover,\n  &:focus {\n    transform: scale(1.05);\n  }\n`;\n\nexport const ContactWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: flex-start;\n`;\n\nexport const ContactName = styled.p`\n  margin-top: 0;\n  margin-bottom: 0;\n`;\n\nexport const ContactNumber = styled.p`\n  margin-top: 0;\n  margin-bottom: 0;\n`;\n\nexport const DeleteContactButton = styled.button`\n  padding: 5px;\n  min-width: 80px;\n  min-height: 30px;\n  cursor: pointer;\n  border-radius: 4px;\n  border: none;\n  text-transform: capitalize;\n\n  &:hover,\n  &:focus-visible {\n    background-color: gray;\n    color: white;\n  }\n`;\n\nexport const EditContactButton = styled.button`\n  padding: 5px;\n  min-width: 80px;\n  min-height: 30px;\n  cursor: pointer;\n  border-radius: 4px;\n  border: none;\n  text-transform: capitalize;\n\n  &:hover,\n  &:focus-visible {\n    background-color: gray;\n    color: white;\n  }\n`;\n\nexport const ContactMessage = styled.p``;\n\n//////////////////////////////////////////////////\n\nexport const EditContactForm = styled.form`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const EditContactFormList = styled.ul`\n  padding-left: 0;\n  margin-bottom: 0;\n  margin-top: 0;\n  list-style: none;\n`;\n\nexport const EditContactFormItem = styled.li``;\n\nexport const EditContactFormLabel = styled.label`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  text-transform: capitalize;\n  font-size: 18px;\n`;\n\nexport const EditContactFormInput = styled.input`\n  min-height: 30px;\n  margin-top: 5px;\n  border: 2px solid gray;\n  border-radius: 4px;\n  padding-left: 5px;\n\n  &::placeholder {\n    font-size: 16px;\n    color: lightgray;\n  }\n`;\n\nexport const UpdateContactButton = styled.button`\n  padding: 5px;\n  min-width: 80px;\n  min-height: 30px;\n  cursor: pointer;\n  border-radius: 4px;\n  border: none;\n  text-transform: capitalize;\n\n  &:hover,\n  &:focus-visible {\n    background-color: gray;\n    color: white;\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Input = styled.input`\n  padding: 4px;\n  min-width: 250px;\n  min-height: 35px;\n  margin-top: 10px;\n  border: 2px solid gray;\n  border-radius: 4px;\n\n  &::placeholder {\n    text-transform: capitalize;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useDeleteContactMutation, useUpdateContactMutation } from 'redux/contact/contact-api';\nimport { ThreeDots } from 'react-loader-spinner';\nimport { toast } from 'react-toastify';\nimport FORM_CONFIG from '../ContactForm/ContactForm.config.json';\nimport {\n  ContactItem,\n  ContactWrapper,\n  ContactName,\n  ContactNumber,\n  DeleteContactButton,\n  EditContactButton,\n  EditContactForm,\n  EditContactFormList,\n  EditContactFormItem,\n  EditContactFormInput,\n  UpdateContactButton,\n} from './ContactList.styled';\n\ninterface ContactListItemProps {\n  id: string;\n  name: string;\n  number: string;\n}\n\nconst ContactListItem = ({ id, name, number }: ContactListItemProps) => {\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [contact, setContact] = useState({ id, name, number });\n\n  const [deleteContact, { isError: isDeleteError, isLoading: isDeleting, isSuccess: isDeleted }] =\n    useDeleteContactMutation();\n\n  const [editContact, { isError: isEditError, isLoading: isEditing, isSuccess: isEdited }] =\n    useUpdateContactMutation();\n\n  const handleInputChange = ({ target: { name, value } }: React.ChangeEvent<HTMLInputElement>) => {\n    setContact(state => ({\n      ...state,\n      [name]: value,\n    }));\n  };\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    editContact(contact);\n    setIsUpdating(false);\n  };\n\n  useEffect(() => {\n    isDeleted && toast.warn(` ${name} is deleted`);\n  }, [isDeleted, name]);\n\n  useEffect(() => {\n    isDeleteError && toast.error(` ${name} can't be deleted`);\n  }, [isDeleteError, name]);\n\n  useEffect(() => {\n    isEdited && toast.success(` ${name} was successfully updated`);\n  }, [isEdited, name]);\n\n  useEffect(() => {\n    isEditError && toast.error(` ${name} can't be edited`);\n  }, [isEditError, name]);\n\n  return (\n    <ContactItem>\n      {isUpdating ? (\n        <EditContactForm onSubmit={handleFormSubmit}>\n          <EditContactFormList>\n            {FORM_CONFIG.map(field => (\n              <EditContactFormItem key={field.name}>\n                <EditContactFormInput\n                  type={field.type}\n                  title={field.title}\n                  name={field.name}\n                  placeholder={field.placeholder}\n                  pattern={field.pattern}\n                  required={field.required}\n                  value={contact[field.name as keyof typeof contact] }\n                  onChange={handleInputChange}\n                />\n              </EditContactFormItem>\n            ))}\n          </EditContactFormList>\n          <ContactWrapper>\n            <UpdateContactButton\n              type=\"button\"\n              disabled={isEditing}\n              onClick={() => setIsUpdating(false)}\n            >\n              cancel\n            </UpdateContactButton>\n            <UpdateContactButton disabled={isEditing}>save</UpdateContactButton>\n          </ContactWrapper>\n        </EditContactForm>\n      ) : (\n        <>\n          <ContactWrapper>\n            <ContactName>{name}</ContactName>\n            <ContactNumber>{number}</ContactNumber>\n          </ContactWrapper>\n          <ContactWrapper>\n            <EditContactButton\n              type=\"button\"\n              disabled={isDeleting}\n              onClick={() => setIsUpdating(true)}\n            >\n              edit\n            </EditContactButton>\n            <DeleteContactButton disabled={isDeleting} onClick={() => deleteContact(id)}>\n              {isDeleting ? (\n                <ThreeDots ariaLabel=\"three-dots-loading\" height={20} width={70} color=\"gray\" />\n              ) : (\n                'delete'\n              )}\n            </DeleteContactButton>\n          </ContactWrapper>\n        </>\n      )}\n    </ContactItem>\n  );\n};\n\nexport default ContactListItem;\n","import { useNavigate } from 'react-router-dom';\nimport { useAppDispatch, useAppSelector, useContacts } from 'redux/hooks';\nimport { getFilterValue, setFilter } from 'redux/contact';\nimport ContactListItem from './ContactListItem';\nimport { ThreeDots } from 'react-loader-spinner';\nimport { ContactList, ContactMessage, Label, Input } from './ContactList.styled';\nimport { AddContactButton } from '../ContactForm/ContactForm.styled';\n\nconst ContactsList = () => {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const filter = useAppSelector(getFilterValue);\n  const { isLoading, isSuccess,  filteredContacts } = useContacts();\n\n  const handleChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n    dispatch(setFilter(value));\n\n  return (\n    <>\n      {isLoading && <ThreeDots color=\"gray\" height={80} width={80} />}\n\n      {filteredContacts?.length === 0 && (\n        <AddContactButton type=\"button\" onClick={() => navigate('/create')}>\n          create contact\n        </AddContactButton>\n      )}\n\n      {isSuccess && filteredContacts ? (\n        <>\n          <Label htmlFor=\"\">\n            <Input placeholder=\"find contacts\" type=\"text\" value={filter} onChange={handleChange} />\n          </Label>\n\n          <ContactList>\n            {filteredContacts.map(contact => (\n              <ContactListItem key={contact.id} {...contact} />\n            ))}\n          </ContactList>\n        </>\n      ) : (\n        <ContactMessage>You haven't any contacts.</ContactMessage>\n      )}\n    </>\n  );\n};\n\nexport default ContactsList;\n"],"names":["ContactFormTitle","styled","ContactForm","ContactFormList","ContactFormItem","ContactFormLabel","ContactFormInput","AddContactButton","ContactList","ContactItem","ContactWrapper","ContactName","ContactNumber","DeleteContactButton","EditContactButton","ContactMessage","EditContactForm","EditContactFormList","EditContactFormItem","EditContactFormInput","UpdateContactButton","Label","Input","id","name","number","useState","isUpdating","setIsUpdating","contact","setContact","useDeleteContactMutation","deleteContact","isDeleteError","isError","isDeleting","isLoading","isDeleted","isSuccess","useUpdateContactMutation","editContact","isEditError","isEditing","isEdited","handleInputChange","target","value","state","useEffect","toast","onSubmit","event","preventDefault","FORM_CONFIG","field","type","title","placeholder","pattern","required","onChange","disabled","onClick","ariaLabel","height","width","color","navigate","useNavigate","dispatch","useAppDispatch","filter","useAppSelector","getFilterValue","useContacts","filteredContacts","length","htmlFor","setFilter","map"],"sourceRoot":""}